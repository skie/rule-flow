[
    {
        "description": ">= with 3 arguments",
        "rule": { ">=": [3, 3, 1] },
        "data": {},
        "result": true
    },
    {
        "description": ">= with 3 arguments failing",
        "rule": { ">=": [3, 3, 4] },
        "data": {},
        "result": false
    },
    {
        "description": ">= is lazily evaluated",
        "rule": { ">=": [2, 3, { "throw": "Not Lazy" }] },
        "data": {},
        "result": false
    },
    {
        "description": ">= with 1 argument",
        "rule": { ">=": [1] },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": ">= with direct argument",
        "rule": { ">=": 1 },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": ">= with empty argument",
        "rule": { ">=": [] },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": ">= with (false, true)",
        "rule": { ">=": [false, true] },
        "data": {},
        "result": false
    },
    {
        "description": ">= with (true, false)",
        "rule": { ">=": [true, false] },
        "data": {},
        "result": true
    },
    {
        "description": ">= with (false, false)",
        "rule": { ">=": [false, false] },
        "data": {},
        "result": true
    },
    {
        "description": ">= with (true, true)",
        "rule": { ">=": [true, true] },
        "data": {},
        "result": true
    },
    {
        "description": ">= with (a, b)",
        "rule": { ">=": ["a", "b"] },
        "data": {},
        "result": false
    },
    {
        "description": ">= with (b, a)",
        "rule": { ">=": ["b", "a"] },
        "data": {},
        "result": true
    },
    {
        "description": ">= with (a, a)",
        "rule": { ">=": ["a", "a"] },
        "data": {},
        "result": true
    },
    {
        "description": ">= with (2024-01-01, 2024-01-02)",
        "rule": { ">=": ["2024-01-01", "2024-01-02"] },
        "data": {},
        "result": false
    },
    {
        "description": ">= with (2024-01-02, 2024-01-01)",
        "rule": { ">=": ["2024-01-02", "2024-01-01"] },
        "data": {},
        "result": true
    },
    {
        "description": ">= with (2024-01-01, 2024-01-01)",
        "rule": { ">=": ["2024-01-01", "2024-01-01"] },
        "data": {},
        "result": true
    },
    {
        "description": ">= with (1n, As)",
        "rule": { ">=": [1, "A"] },
        "data": {},
        "error": { "type": "NaN" }
    },
    {
        "description": ">= with (1n, As)",
        "rule": { ">=": [1, "A"] },
        "data": {},
        "error": { "type": "NaN" }
    },
    {
        "description": ">= with (null, 1)",
        "rule": { ">=": [null, 1] },
        "data": {},
        "result": false
    },
    {
        "description": ">= with (1, null)",
        "rule": { ">=": [1, null] },
        "data": {},
        "result": true
    },
    {
        "description": ">= with (null, 0)",
        "rule": { ">=": [null, 0] },
        "data": {},
        "result": true
    },
    {
        "description": ">= with (null, true)",
        "rule": { ">=": [null, true] },
        "data": {},
        "result": false
    },
    {
        "description": ">= with (1, true)",
        "rule": { ">=": [1, true] },
        "data": {},
        "result": true
    },
    {
        "description": ">= with (0, false)",
        "rule": { ">=": [0, false] },
        "data": {},
        "result": true
    },
    {
        "description": ">= with [] and [1]",
        "rule": { ">=": [[], [1]] },
        "data": {},
        "error": { "type": "NaN" }
    },
    {
        "description": ">= with [1] and 5",
        "rule": { ">=": [[1], 5] },
        "data": {},
        "error": { "type": "NaN" }
    },
    {
        "description": ">= with {} and 1",
        "rule": { ">=": [{}, 1] },
        "data": {},
        "error": { "type": "NaN" }
    },
    {
        "description": ">= with 1 and {}",
        "rule": { ">=": [1, {}] },
        "data": {},
        "error": { "type": "NaN" }
    }
]
