[
    {
        "description": "if with dynamic arguments throws",
        "rule": { "if": { "preserve": [true, 1, 2] } },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "or with dynamic arguments throws",
        "rule": { "or": { "preserve": [false, false, true] } },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "and with dynamic arguments throws",
        "rule": { "and": { "preserve": [true, true, true] } },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "map with dynamic arguments throws",
        "rule": { "map": { "preserve": [[1,2,3], { "val": [] }]} },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "filter with dynamic arguments throws",
        "rule": { "filter": { "preserve": [[1,2,3], { "val": [] }]} },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "reduce with dynamic arguments throws",
        "rule": { "reduce": { "preserve": [[1,2,3], { "val": [] }]} },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "some with dynamic arguments throws",
        "rule": { "some": { "preserve": [[1,2,3], { "val": [] }]} },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "all with dynamic arguments throws",
        "rule": { "all": { "preserve": [[1,2,3], { "val": [] }]} },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "none with dynamic arguments throws",
        "rule": { "none": { "preserve": [[1,2,3], { "val": [] }]} },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "< with dynamic arguments throws",
        "rule": { "<": { "preserve": [1,2,3] } },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "<= with dynamic arguments throws",
        "rule": { "<=": { "preserve": [1,2,3] } },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "> with dynamic arguments throws",
        "rule": { ">": { "preserve": [1,2,3] } },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": ">= with dynamic arguments throws",
        "rule": { ">=": { "preserve": [1,2,3] } },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "== with dynamic arguments throws",
        "rule": { "==": { "preserve": [1,2,3] } },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "!= with dynamic arguments throws",
        "rule": { "!=": { "preserve": [1,2,3] } },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "=== with dynamic arguments throws",
        "rule": { "===": { "preserve": [1,2,3] } },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "!== with dynamic arguments throws",
        "rule": { "!==": { "preserve": [1,2,3] } },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    "Any of the operators listed when called with a non-array argument, will throw",
    {
        "description": "if with static non-array argument throws",
        "rule": { "if": 5 },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "or with static non-array argument throws",
        "rule": { "or": 5 },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "and with static non-array argument throws",
        "rule": { "and": 5 },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "map with static non-array argument throws",
        "rule": { "map": 5 },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "filter with static non-array argument throws",
        "rule": { "filter": 5 },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "reduce with static non-array argument throws",
        "rule": { "reduce": 5 },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "some with static non-array argument throws",
        "rule": { "some": 5 },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "all with static non-array argument throws",
        "rule": { "all": 5 },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "none with static non-array argument throws",
        "rule": { "none": 5 },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "< with static non-array argument throws",
        "rule": { "<": 5 },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "<= with static non-array argument throws",
        "rule": { "<=": 5 },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "> with static non-array argument throws",
        "rule": { ">": 5 },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": ">= with static non-array argument throws",
        "rule": { ">=": 5 },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "== with static non-array argument throws",
        "rule": { "==": 5 },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "!= with static non-array argument throws",
        "rule": { "!=": 5 },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "=== with static non-array argument throws",
        "rule": { "===": 5 },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "!== with static non-array argument throws",
        "rule": { "!==": 5 },
        "data": null,
        "error": { "type": "Invalid Arguments" }
    }
]